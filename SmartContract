pragma solidity ^0.5.6;

import "./ERC20.sol";
import "./Owner.sol";

library TopMath{
    function add(uint a, uint b)internal pure
        returns(uint c)
        {
            c=a+b;
            require(c>=a);
            
        }
    function sub(uint a, uint b)internal pure
        returns(uint c)
        {
            c=a-b;
        }
    function mul(uint a, uint b)internal pure
        returns(uint c)
        {
            c=a*b;
            require(a==0 ||c/a==b);
        }
    function div(uint a, uint b)internal pure
        returns(uint c)
        {
            require(b>0);
            c=a/b;
        }
}



contract JeffToken is ERC20, Owner{
    using TopMath for uint;
    
    string public symbol;
    string public name;
    uint8 decimals;
    uint _totalSupply;
    mapping(address => uint)balances;
    mapping(address => mapping(address => uint)) allowed;
    
    constructor()public
    {
        symbol ="Token";
        name = "NewToken";
        decimals = 18;
        _totalSupply = 1000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        emit Transfer(address(0),owner,_totalSupply);
    }
    function totalSupply()
        public view returns (uint){
            return _totalSupply.sub(balances[address(0)]);
        }
    function balanceOf (address tokenOwner)
        public view returns (uint balance){
            return balances[tokenOwner];
        }
    function allowance(address tokenOwner, address spender) 
        public view returns (uint remaining){
            return allowed[tokenOwner][spender];
        }
    function transfet(address to, uint tokens)
        public returns (bool sucess){
            balances[msg.sender] = balances[msg.sender].sub(tokens);
            balances[to]= balances[to].add(tokens);
            emit Transfer(msg.sender,to,tokens);
            return true;
        }
    function approve(address spender, uint tokens)
        public returns(bool sucess){
            allowed[msg.sender][spender] = tokens;
            emit Approval(msg.sender,spender,tokens);  
            return true ;
        }
    function transferFrom(address from, address to, uint tokens) public returns(bool sucess){
            balances[from] = balances[from].sub(tokens);
            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
            balances[to].add(tokens);
            emit Transfer(from,to,tokens);
            return true;
        }
        
    function pay(address _from, address _to, uint tokens) public returns (bool success) {
        balances[_from] = balances[_from].sub(tokens); 
        balances[_to] = balances[_to].add(tokens);
        emit Transfer(_from, _to, tokens);
        return true;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
pragma solidity ^0.5.6;


import "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Full.sol";
import "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/ownership/Ownable.sol";
import "./JeffToken.sol";


contract WeaponToken is ERC721Full, Ownable {
  event NewWeapon(uint weaponId, string name, uint dna);

  uint dnaDigits = 16;
  uint dnaModulus = 10 ** dnaDigits;
  
  uint createWeaponFee = 0.001 ether;
  uint creationUpFee = 5;
  uint createFeeCorrected = 1;
  uint weaponPrice = 1;
  
  struct Weapon {
    string name;
    uint256 _weaponDna;
    uint64 birthTime;
  }
  
  constructor() public ERC721Full("WeaponToken","WEAPON"){
      
  }


  Weapon[] public weapons;
  mapping (uint => address) public weaponIndexToOwner;
  mapping (address => uint) ownerWeaponCount;
  JeffToken tokenContract;
  
  function setJeffToken(address payable novoJeff) external onlyOwner  {
      tokenContract = JeffToken(novoJeff);
  }

  function _createWeapon(string memory _name, uint _dna) internal {
    uint id = weapons.push(Weapon(_name, _dna,uint64(now))) - 1;
    weaponIndexToOwner[id] = msg.sender;
    ownerWeaponCount[msg.sender]++;
    emit NewWeapon(id, _name, _dna);
  }
  function _generateRandomDna(string memory _str) private view returns (uint) {
    uint rand = uint(keccak256(abi.encodePacked(_str)));
    return rand % dnaModulus;
  }
  function createRandomWeapon(string calldata _name) external payable {   
    require(msg.value == createWeaponFee);
    require(ownerWeaponCount[msg.sender] < 10);
    _createWeapon(_name,_generateRandomDna(_name));
  }
  
  modifier haveBalance{
    require(tokenContract.balanceOf(msg.sender) >= creationUpFee);
    _;
  }

  function buyWeaponFrom(address buyer, address seller, uint weaponId) external payable {
     require(seller == weaponIndexToOwner[weaponId]);
     require(tokenContract.balanceOf(buyer) > weaponPrice);
     tokenContract.pay(buyer, seller, weaponPrice);
     weaponPrice += 1;
     weaponIndexToOwner[weaponId] = buyer;
  }
  
  function mixWeaponDna(string calldata _name,uint weaponId, uint weaponId2)external payable{
    require(msg.sender == weaponIndexToOwner[weaponId]);
    require(msg.sender == weaponIndexToOwner[weaponId2]);
    Weapon storage myWeapon = weapons[weaponId];
    Weapon storage myWeapon2 = weapons[weaponId2];
    myWeapon._weaponDna += myWeapon2._weaponDna % dnaModulus;
    uint newWeaponDna = (myWeapon._weaponDna) / 2;
    _createWeapon(_name, newWeaponDna);
  }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
pragma solidity ^0.5.6;

contract ERC20{
    function totalSupply()
        public view returns (uint);
    function balanceOf (address tokenOwner)
        public view returns (uint balance);
    function allowance(address tokenOwner, address spender) 
        public view returns (uint remaining);
    function transfet(address to, uint tokens)
        public returns (bool sucess);
    function approve(address spender, uint tokens)
        public returns(bool sucess);
    function transferFrom(address from, address to, uint tokens)
        public returns(bool sucess);
        
    event Transfer (address indexed from, address indexed to, uint tokens);
    event Approval(address indexed from, address indexed spender, uint tokens);
} 
/////////////////////////////////////////////////////////////////////////////////////////////////
pragma solidity ^0.5.6;

contract Owner
{
    address public owner;
    address public newOwner;
    event Ownershiptransferred(address indexed _from,address indexed _to);
    constructor() public
    {
        owner = msg.sender;
    }
    modifier onlyOwner
    {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address _newOwner)
        public onlyOwner
        {
            newOwner = _newOwner;
        }
    function acceptOwnership()public
    {
        require(newOwner == msg.sender);
        emit Ownershiptransferred(owner,newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}
contract ApproveAndCallback{
    function receiveAproval(address from, uint256 tokens, address token, bytes memory data)public;
}
